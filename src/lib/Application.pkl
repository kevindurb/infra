import "@k8s/K8sResource.pkl"
import "@k8s/api/apps/v1/Deployment.pkl"
import "@k8s/api/core/v1/Service.pkl"
import "@k8s/api/core/v1/PodSpec.pkl"
import "@k8s/api/core/v1/ContainerPort.pkl"
import "@k8s/api/networking/v1/Ingress.pkl"
import "./TailscaleIngress.pkl"

name: String
image: String
port: Int
subdomain: String = module.name
ingressType: "tailscale" | "lan" = "tailscale"
includeDeployment: Boolean = true
includeService: Boolean = true
includeIngress: Boolean = true

labels: Mapping<String, String> = new {
  ["app.kubernetes.io/name"] = module.name
  ["app.kubernetes.io/component"] = "web"
}

primaryContainerPort: ContainerPort = new {
  name = "web"
  containerPort = module.port
}

primaryContainer: PodSpec.Container = new {
  name = module.name
  image = module.image
  ports {
    primaryContainerPort
  }
}

primaryDeployment: Deployment = new {
  metadata {
    name = module.name + "-deployment"
    labels = module.labels
  }
  spec {
    replicas = 1
    strategy {
      type = "Recreate"
    }
    selector {
      matchLabels = module.labels
    }
    template {
      metadata {
        labels = module.labels
      }
      spec {
        containers {
          primaryContainer
        }
      }
    }
  }
}

primaryService: Service = new {
  metadata {
    name = module.name + "-service"
    labels = module.labels
  }
  spec {
    selector = module.labels
    ports {
      new {
        name = "web"
        port = 80
        targetPort = primaryContainerPort.containerPort
      }
    }
  }
}

primaryIngress: Ingress =
if (module.ingressType == "tailscale")
  new TailscaleIngress {
    metadata {
      name = module.name + "-ingress"
      labels = module.labels
    }
    spec {
      defaultBackend {
        service {
          name = primaryService.metadata.name
          port {
            name = primaryService.spec.ports[0].name
          }
        }
      }
      tls {
        new {
          hosts {
            module.subdomain
          }
        }
      }
    }
  }
else
  new Ingress {
    metadata {
      name = module.name + "-ingress"
      labels = module.labels
      annotations {
        ["external-dns.alpha.kubernetes.io/hostname"] = module.subdomain + ".durbin.casa"
        ["cert-manager.io/cluster-issuer"] = "cloudflare-issuer"
      }
    }
    spec {
      ingressClassName = "nginx"
      rules {
        new {
          host = module.subdomain + ".durbin.casa"
          http {
            paths {
              new {
                pathType = "Prefix"
                path = "/"
                backend {
                  service {
                    name = primaryService.metadata.name
                    port {
                      name = primaryService.spec.ports[0].name
                    }
                  }
                }
              }
            }
          }
        }
      }
      tls {
        new {
          hosts { module.subdomain + ".durbin.casa" }
          secretName = "durbin-casa-wildcard-cert"
        }
      }
    }
  }

function getResources(): List<K8sResource> = new Listing {
  if (includeDeployment) primaryDeployment else null
  if (includeService) primaryService else null
  if (includeIngress) primaryIngress else null
}.toList().filterNonNull()
