# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: '3'

vars:
  TEMPLATES_DIR: '{{.ROOT_DIR}}/.taskfiles/templates/resources'
  MINIJINJA_ARGS: >-
    --env
    --trim-blocks
    --lstrip-blocks
    --autoescape=none

tasks:
  mk:
    requires:
      vars: [appname, image]
    cmds:
      - task: ks
      - task: deploy
      - task: svc
      - task: int-ing
      - task: gatus

  mk-ext:
    requires:
      vars: [appname, ip]
    cmds:
      - task: ks
      - task: svc-ext
      - task: int-ing
        vars:
          external: true
      - task: gatus

  ks:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}
    env:
      APP: '{{.appname}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/kustomization.yml.j2
        > kustomization.yml

  deploy:
    requires:
      vars: [appname, image, port]
    dir: ./k8s/{{ .appname }}/resources
    env:
      APP: '{{.appname}}'
      COMP: '{{or .component "web"}}'
      IMG: '{{.image}}'
      PORT: '{{.port}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/deployment.yml.j2
        > {{or .component "web"}}-deployment.yml

  svc:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    env:
      APP: '{{.appname}}'
      COMP: '{{or .component "web"}}'
      PORT: '{{.port}}'
      PROTO: '{{or .proto "http"}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/service.yml.j2
        > {{or .component "web"}}-service.yml

  external-endpoint:
    requires:
      vars: [appname, ip]
    dir: ./k8s/{{ .appname }}/resources
    env:
      APP: '{{.appname}}'
      SUBDOMAIN: '{{or .subdomain .appname}}'
      IP: '{{.ip}}'
      COMP: '{{or .component "web"}}'
      PORT: '{{or .port "80"}}'
      PROTO: '{{or .proto "http"}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/external-endpoint.yml.j2
        > external-endpoint.yml

  int-ing:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    env:
      APP: '{{.appname}}'
      SUBDOMAIN: '{{or .subdomain .appname}}'
      PORT: '{{or .port "80"}}'
      PROTO: '{{or .proto "http"}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/internal-ingress.yml.j2
        > internal-ingress.yml

  ext-ing:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    env:
      APP: '{{.appname}}'
      SUBDOMAIN: '{{or .subdomain .appname}}'
      PORT: '{{or .port "80"}}'
      PROTO: '{{or .proto "http"}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/external-ingress.yml.j2
        > external-ingress.yml

  pvc:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    env:
      APP: '{{.appname}}'
      SIZE: '{{or .size "1G"}}'
    cmds:
      - >
        minijinja-cli
        {{.MINIJINJA_ARGS}}
        {{.TEMPLATES_DIR}}/pvc.yml.j2
        > pvc.yml

  pg:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > pg.yml
        ---
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: postgres
        spec:
          instances: 3
          storage:
            storageClass: local-storage
            size: 5Gi
          backup:
            retentionPolicy: 30d
            barmanObjectStore:
              destinationPath: s3://postgres-wal-backups
              endpointURL: http://minio-api-service
              s3Credentials:
                accessKeyId:
                  name: minio-secret
                  key: MINIO_ACCESS_KEY
                secretAccessKey:
                  name: minio-secret
                  key: MINIO_SECRET_KEY
          # bootstrap:
          #   recovery:
          #     source: {{ .appname }}-postgres
          # externalClusters:
          #   - name: {{ .appname }}-postgres
          #     barmanObjectStore:
          #       serverName: {{ .appname }}-postgres
          #       destinationPath: s3://postgres-wal-backups
          #       endpointURL: http://minio-api-service
          #       s3Credentials:
          #         accessKeyId:
          #           name: minio-secret
          #           key: MINIO_ACCESS_KEY
          #         secretAccessKey:
          #           name: minio-secret
          #           key: MINIO_SECRET_KEY
          #       wal:
          #         maxParallel: 8

        ---
        apiVersion: postgresql.cnpg.io/v1
        kind: ScheduledBackup
        metadata:
          name: backup
        spec:
          schedule: '0 0 0 * * *'
          backupOwnerReference: self
          cluster:
            name: {{ .appname }}-postgres
        EOF

  valkey:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > valkey.yml
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: valkey-deployment
          labels: &labels
            app.kubernetes.io/component: valkey
        spec:
          replicas: 1
          strategy:
            type: Recreate
          selector:
            matchLabels: *labels
          template:
            metadata:
              labels: *labels
            spec:
              containers:
                - name: valkey
                  image: docker.io/valkey/valkey:7.2
                  resources:
                    limits:
                      memory: 1G
                  ports:
                    - name: valkey
                      containerPort: 6379

        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: valkey-service
        spec:
          selector:
            app.kubernetes.io/component: valkey
          ports:
            - name: valkey
              port: 6379
              targetPort: valkey
        EOF

  secret:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > secret.yml
        ---
        apiVersion: k8s.bitwarden.com/v1
        kind: BitwardenSecret
        metadata:
          name: secret
          annotations:
            argocd.argoproj.io/sync-options: Replace=true
        spec:
          organizationId: 575f69b2-49f4-456d-bd6f-b14101103188
          secretName: {{ .appname }}-secret
          map:
            - secretKeyName: fakefakefake
              bwSecretId: fakefakefake
          authToken:
            secretName: bw-auth-token
            secretKey: token
        EOF

  gatus:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > gatus-config.yml
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: gatus-config
          labels:
            gatus.io/enabled: 'true'
        data:
          {{ .appname }}.yml: |
            endpoints:
              - name: {{ title .appname }}
                url: {{ or .portname "http" }}://{{ .appname }}-service
                {{ if eq .portname "https" }}
                client:
                  insecure: true
                {{ end }}
                conditions:
                  - '[STATUS] == 200'
        EOF
