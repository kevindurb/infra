# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: '3'

tasks:
  mk:
    requires:
      vars: [appname, image]
    cmds:
      - task: ks
      - task: deploy
      - task: svc
      - task: ing
      - task: gatus

  mk-ext:
    requires:
      vars: [appname, ip]
    cmds:
      - task: ks
      - task: svc-ext
      - task: ing
        vars:
          external: true
      - task: gatus

  ks:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}
    cmds:
      - |
        cat << EOF > kustomization.yml
        ---
        apiVersion: kustomize.config.k8s.io/v1beta1
        kind: Kustomization

        namePrefix: {{ .appname }}-

        resources: []

        commonLabels:
          app.kubernetes.io/name: {{ .appname }}
        EOF

  deploy:
    requires:
      vars: [appname, image]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > deployment.yml
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: deployment
          labels: &labels
            app.kubernetes.io/component: {{ or .component "web" }}
        spec:
          replicas: 1
          strategy:
            type: Recreate
          selector:
            matchLabels: *labels
          template:
            metadata:
              labels: *labels
            spec:
              # volumes:
              #   - name: volume
              #     persistentVolumeClaim:
              #       claimName: volume
              containers:
                - name: {{ or .name .appname }}
                  image: {{ .image }}
                  # volumeMounts:
                  #   - name: volume
                  #     mountPath: /var/www/app/data
                  ports:
                    - name: {{ or .portname "http" }}
                      containerPort: {{ or .port 8080 }}
        EOF

  svc:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > service.yml
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: service
        spec:
          selector:
            app.kubernetes.io/component: {{ or .component "web" }}
          ports:
            - name: {{ or .portname "http" }}
              port: {{ if eq .portname "https" }}443{{ else }}80{{ end }}
              targetPort: {{ or .portname "http" }}
        EOF

  svc-ext:
    requires:
      vars: [appname, ip]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > service.yml
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: service
        spec:
          ports:
            - name: {{ or .portname "http" }}
              port: {{ if eq .portname "https" }}443{{ else }}80{{ end }}
              targetPort: {{ or .portname "http" }}

        ---
        apiVersion: discovery.k8s.io/v1
        kind: EndpointSlice
        metadata:
          name: service
          labels:
            kubernetes.io/service-name: {{ .appname }}-service
        addressType: IPv4
        ports:
          - name: {{ or .portname "http" }}
            appProtocol: http
            protocol: TCP
            port: {{ if eq .portname "https" }}443{{ else }}80{{ end }}
        endpoints:
          - addresses:
              - {{ .ip }}
            conditions: {}
        EOF

  ing:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > ingress.yml
        ---
        apiVersion: networking.k8s.io/v1
        kind: Ingress
        metadata:
          name: ingress
          annotations:
            cert-manager.io/cluster-issuer: cloudflare-issuer
            {{ if eq .portname "https" }}nginx.ingress.kubernetes.io/backend-protocol: 'HTTPS'{{ end }}
            gethomepage.dev/href: 'https://{{ or .subdomain .appname }}.durbin.casa'
            gethomepage.dev/enabled: 'true'
            gethomepage.dev/app: {{ .appname }}
            gethomepage.dev/group: Other
            gethomepage.dev/icon: {{ .appname }}
            gethomepage.dev/name: {{ title .appname }}
            gethomepage.dev/widget.type: {{ .appname }}
            gethomepage.dev/widget.url: {{ or .portname "http" }}://{{ .appname }}-service
            {{ if .external }}
            gethomepage.dev/siteMonitor: {{ or .portname "http" }}://{{ .appname }}-service
            gethomepage.dev/external: 'true'
            {{ end }}
        spec:
          ingressClassName: nginx
          rules:
            - host: &host {{ or .subdomain .appname }}.durbin.casa
              http:
                paths:
                  - pathType: Prefix
                    path: '/'
                    backend:
                      service:
                        name: service
                        port:
                          name: {{ or .portname "http" }}
          tls:
            - secretName: durbin-casa-wildcard-cert
              hosts:
                - *host
        EOF

  pvc:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > pvc.yml
        ---
        apiVersion: v1
        kind: PersistentVolumeClaim
        metadata:
          name: volume
        spec:
          accessModes:
            - ReadWriteOnce
          storageClassName: local-storage
          resources:
            requests:
              storage: {{ or .size "1G" }}
        ---
        apiVersion: external-secrets.io/v1beta1
        kind: ExternalSecret
        metadata:
          name: volume-repository
        spec:
          refreshInterval: 1h
          secretStoreRef:
            kind: ClusterSecretStore
            name: kubernetes
          target:
            name: {{ .appname }}-volume-repository
            creationPolicy: Owner
            template:
              engineVersion: v2
              data:
                RESTIC_REPOSITORY: s3:http://minio-api-service/volume-backups/{{ .appname }}-volume
                RESTIC_PASSWORD: '{{ `{{ .RESTIC_PASSWORD }}` }}'
                AWS_ACCESS_KEY_ID: '{{ `{{ .AWS_ACCESS_KEY_ID }}` }}'
                AWS_SECRET_ACCESS_KEY: '{{ `{{ .AWS_SECRET_ACCESS_KEY }}` }}'
          data:
            - secretKey: RESTIC_PASSWORD
              remoteRef:
                key: minio-secret
                property: RESTIC_PASSWORD
            - secretKey: AWS_ACCESS_KEY_ID
              remoteRef:
                key: minio-secret
                property: MINIO_ACCESS_KEY
            - secretKey: AWS_SECRET_ACCESS_KEY
              remoteRef:
                key: minio-secret
                property: MINIO_SECRET_KEY

        ---
        apiVersion: volsync.backube/v1alpha1
        kind: ReplicationSource
        metadata:
          name: volume-backup
        spec:
          sourcePVC: {{ .appname }}-volume
          trigger:
            schedule: '0 * * * *'
          restic:
            pruneIntervalDays: 14
            repository: {{ .appname }}-volume-repository
            retain:
              hourly: 6
              daily: 5
              weekly: 4
              monthly: 2
              yearly: 1
            copyMethod: Direct

        ---
        # apiVersion: volsync.backube/v1alpha1
        # kind: ReplicationDestination
        # metadata:
        #   name: volume-restore
        # spec:
        #   trigger:
        #     manual: manual-once
        #   restic:
        #     repository: {{ .appname }}-volume-repository
        #     destinationPVC: {{ .appname }}-volume
        #     copyMethod: Direct
        EOF

  pg:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > pg.yml
        ---
        apiVersion: postgresql.cnpg.io/v1
        kind: Cluster
        metadata:
          name: postgres
        spec:
          instances: 3
          storage:
            storageClass: local-storage
            size: 5Gi
          backup:
            retentionPolicy: 30d
            barmanObjectStore:
              destinationPath: s3://postgres-wal-backups
              endpointURL: http://minio-api-service
              s3Credentials:
                accessKeyId:
                  name: minio-secret
                  key: MINIO_ACCESS_KEY
                secretAccessKey:
                  name: minio-secret
                  key: MINIO_SECRET_KEY
          # bootstrap:
          #   recovery:
          #     source: {{ .appname }}-postgres
          # externalClusters:
          #   - name: {{ .appname }}-postgres
          #     barmanObjectStore:
          #       serverName: {{ .appname }}-postgres
          #       destinationPath: s3://postgres-wal-backups
          #       endpointURL: http://minio-api-service
          #       s3Credentials:
          #         accessKeyId:
          #           name: minio-secret
          #           key: MINIO_ACCESS_KEY
          #         secretAccessKey:
          #           name: minio-secret
          #           key: MINIO_SECRET_KEY
          #       wal:
          #         maxParallel: 8

        ---
        apiVersion: postgresql.cnpg.io/v1
        kind: ScheduledBackup
        metadata:
          name: backup
        spec:
          schedule: '0 0 0 * * *'
          backupOwnerReference: self
          cluster:
            name: {{ .appname }}-postgres
        EOF

  valkey:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > valkey.yml
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: valkey-deployment
          labels: &labels
            app.kubernetes.io/component: valkey
        spec:
          replicas: 1
          strategy:
            type: Recreate
          selector:
            matchLabels: *labels
          template:
            metadata:
              labels: *labels
            spec:
              containers:
                - name: valkey
                  image: docker.io/valkey/valkey:7.2
                  resources:
                    limits:
                      memory: 1G
                  ports:
                    - name: valkey
                      containerPort: 6379

        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: valkey-service
        spec:
          selector:
            app.kubernetes.io/component: valkey
          ports:
            - name: valkey
              port: 6379
              targetPort: valkey
        EOF

  secret:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > secret.yml
        ---
        apiVersion: k8s.bitwarden.com/v1
        kind: BitwardenSecret
        metadata:
          name: secret
        spec:
          organizationId: 575f69b2-49f4-456d-bd6f-b14101103188
          secretName: {{ .appname }}-secret
          map:
            - secretKeyName: fakefakefake
              bwSecretId: fakefakefake
          authToken:
            secretName: bw-auth-token
            secretKey: token
        EOF

  gatus:
    requires:
      vars: [appname]
    dir: ./k8s/{{ .appname }}/resources
    cmds:
      - |
        cat << EOF > gatus-config.yml
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: gatus-config
          labels:
            gatus.io/enabled: 'true'
        data:
          {{ .appname }}.yml: |
            endpoints:
              - name: {{ title .appname }}
                group: Applications
                url: {{ or .portname "http" }}://{{ .appname }}-service
                {{ if eq .portname "https" }}
                client:
                  insecure: true
                {{ end }}
                conditions:
                  - '[STATUS] == 200'
        EOF
