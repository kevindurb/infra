---
version: '3.8'

volumes:
  nodered:
  firefly_iii_upload:
  plex:
  grafana:
  prometheus:
  caddy:
  homeassistant:
  influxdb:
  snapcast:
  mopidy:
  roundcube:
  omada-data:
  omada-work:
  omada-logs:

x-service-defaults: &service-defaults
  restart: unless-stopped
  volumes:
    - /etc/localtime:/etc/localtime:ro

x-logging-defaults: &logging-defaults
  depends_on:
    - loki
  logging:
    driver: loki
    options:
      loki-url: http://localhost:3100/loki/api/v1/push

services:
  caddy:
    <<: [*service-defaults, *logging-defaults]
    build: ./containers/caddy
    environment:
      DOMAIN: $DOMAIN
      CLOUDFLARE_EMAIL: $EMAIL
      CLOUDFLARE_API_TOKEN: $CLOUDFLARE_API_TOKEN
      ACME_AGREE: 'true'
    volumes:
      - ./containers/caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy:/data
    ports:
      - 80:80
      - 443:443

  whoami:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/jwilder/whoami:latest
    depends_on:
      - caddy

  postgres:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/postgres:13
    ports:
      - 5432:5432
    volumes:
      - ./containers/postgres:/docker-entrypoint-initdb.d
    environment:
      POSTGRES_PASSWORD: $PG_PASSWORD

  redis:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/redis:6.2-alpine
    command: redis-server --requirepass $REDIS_PASSWORD

  influxdb:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/influxdb:2.1-alpine
    volumes:
      - influxdb:/var/lib/influxdb

  homeassistant:
    <<: [*service-defaults, *logging-defaults]
    image: ghcr.io/home-assistant/home-assistant:stable
    network_mode: host
    environment:
      - HA_DATABASE_URL
    volumes:
      - homeassistant:/config
      - ./containers/homeassistant/configuration.yaml:/config/configuration.yaml
    depends_on:
      - influxdb
      - postgres
      - caddy

  nodered:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/nodered/node-red:2.1.3
    volumes:
      - nodered:/data
      - ./containers/nodered/settings.js:/data/settings.js
    depends_on:
      - caddy

  adminer:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/adminer
    environment:
      ADMINER_DEFAULT_SERVER: postgres

  guacd:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/guacamole/guacd

  guacamole:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/guacamole/guacamole
    depends_on:
      - caddy
      - postgres
      - guacd
    environment:
      GUACD_HOSTNAME: guacd
      POSTGRES_USER: postgres
      POSTGRES_DATABASE: guacamole
      POSTGRES_HOSTNAME: postgres
      POSTGRES_PASSWORD: $PG_PASSWORD

  grafana:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/grafana/grafana:8.0.3
    environment:
      GF_INSTALL_PLUGINS: flant-statusmap-panel,ae3e-plotly-panel
      GF_DATABASE_URL: $GF_DATABASE_URL
      GF_SERVER_ROOT_URL: https://grafana.durbin.casa
      GF_RENDERING_SERVER_URL: http://grafana_renderer:8081/render
      GF_RENDERING_CALLBACK_URL: http://grafana:3000/
    depends_on:
      - caddy
      - postgres
      - redis
      - grafana_renderer
    volumes:
      - ./containers/grafana:/etc/grafana
      - grafana:/var/lib/grafana

  loki:
    <<: [*service-defaults]
    image: grafana/loki
    ports:
      - '3100:3100'

  # grafana_renderer:
  #   image: grafana/grafana-image-renderer:latest

  # prometheus:
  #   <<: [*service-defaults, *logging-defaults]
  #   image: docker.io/prom/prometheus:latest
  #   volumes:
  #     - prometheus:/prometheus
  #     - ./containers/prometheus:/etc/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yaml'
  #     - '--storage.tsdb.path=/prometheus'
  #     - '--storage.tsdb.retention.time=1y'

  # node_exporter:
  #   <<: [*service-defaults, *logging-defaults]
  #   image: quay.io/prometheus/node-exporter:latest
  #   command:
  #     - '--path.rootfs=/host'
  #   pid: host
  #   network_mode: host
  #   volumes:
  #     - '/:/host:ro,rslave'

  # ping_exporter:
  #   <<: [*service-defaults, *logging-defaults]
  #   image: docker.io/prom/blackbox-exporter:latest
  #   command:
  #     - '--config.file=/config/ping.yaml'
  #   volumes:
  #     - ./containers/ping_exporter:/config

  # speedtest_exporter:
  #   <<: [*service-defaults, *logging-defaults]
  #   image: docker.io/miguelndecarvalho/speedtest-exporter:latest

  # weather-exporter:
  #   <<: [*service-defaults, *logging-defaults]
  #   image: docker.io/kevindurb/weather-exporter
  #   environment:
  #     - LATITUDE
  #     - LONGITUDE

  nextcloud:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/nextcloud:23-apache
    environment:
      NEXTCLOUD_TRUSTED_DOMAINS: nextcloud.$DOMAIN
      POSTGRES_HOST: postgres
      POSTGRES_DB: nextcloud
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: $PG_PASSWORD
      REDIS_HOST: redis
      REDIS_HOST_PASSWORD: $REDIS_PASSWORD
      APACHE_DISABLE_REWRITE_IP: 1
      TRUSTED_PROXIES: 0.0.0.0/0
    volumes:
      - $NEXTCLOUD_DATA:/var/www/html
    depends_on:
      - caddy
      - redis
      - postgres

  plex:
    <<: [*service-defaults, *logging-defaults]
    image: lscr.io/linuxserver/plex
    network_mode: host
    environment:
      PUID: 1000
      PGID: 1000
      VERSION: docker
      PLEX_CLAIM: $PLEX_CLAIM
    volumes:
      - plex:/config
      - $MEDIA_LOCATION:/media
    depends_on:
      - caddy

  firefly:
    <<: [*service-defaults, *logging-defaults]
    image: fireflyiii/core
    volumes:
      - firefly_iii_upload:/var/www/html/storage/upload
    depends_on:
      - caddy
      - postgres
    environment:
      APP_URL: https://firefly.$DOMAIN
      TRUSTED_PROXIES: '**'
      APP_KEY: $FIREFLY_APP_KEY
      DB_HOST: postgres
      DB_PORT: 5432
      DB_CONNECTION: pgsql
      DB_DATABASE: firefly
      DB_USERNAME: postgres
      DB_PASSWORD: $PG_PASSWORD
      DISABLE_FRAME_HEADER: 'false'

  fidi:
    <<: [*service-defaults, *logging-defaults]
    image: fireflyiii/data-importer
    depends_on:
      - firefly
    environment:
      FIREFLY_III_ACCESS_TOKEN: $FIREFLY_III_ACCESS_TOKEN
      FIREFLY_III_URL: http://firefly:8080
      TRUSTED_PROXIES: '**'

  mopidy:
    <<: [*service-defaults, *logging-defaults]
    image: wernight/mopidy
    volumes:
      # - mopidy:/home/mopidy/.config/mopidy
      - ./containers/mopidy/mopidy.conf:/config/mopidy.conf
      - snapcast:/tmp/snapcast/
    depends_on:
      - snapserver
      - caddy

  snapserver:
    <<: [*service-defaults, *logging-defaults]
    image: ivdata/snapserver
    volumes:
      - snapcast:/tmp/snapcast/
      - ./containers/snapserver/snapserver.conf:/etc/snapserver.conf
    ports:
      - 1704:1704
      - 1705:1705
      - 1780:1780

  roundcubemail:
    <<: [*service-defaults, *logging-defaults]
    image: roundcube/roundcubemail:latest
    depends_on:
      - postgres
      - caddy
    volumes:
      - roundcube:/var/www/html
    environment:
      - ROUNDCUBEMAIL_DB_TYPE=pgsql
      - ROUNDCUBEMAIL_DB_HOST=postgres
      - ROUNDCUBEMAIL_DB_NAME=roundcube
      - ROUNDCUBEMAIL_DB_USER=postgres
      - ROUNDCUBEMAIL_DB_PASSWORD=$PG_PASSWORD
      - ROUNDCUBEMAIL_SKIN=elastic
      - ROUNDCUBEMAIL_DEFAULT_HOST=ssl://imap.gmail.com
      - ROUNDCUBEMAIL_SMTP_SERVER=ssl://smtp.gmail.com

  omada:
    <<: [*service-defaults, *logging-defaults]
    image: docker.io/mbentley/omada-controller:5.0
    network_mode: host
    depends_on:
      - caddy
    environment:
      MANAGE_HTTP_PORT: 8088
      MANAGE_HTTPS_PORT: 8043
      PORTAL_HTTP_PORT: 8088
      PORTAL_HTTPS_PORT: 8843
      SHOW_SERVER_LOGS: 'true'
      SHOW_MONGODB_LOGS: 'false'
      SSL_CERT_NAME: 'tls.crt'
      SSL_KEY_NAME: 'tls.key'
      TZ: Etc/UTC
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - omada-data:/opt/tplink/EAPController/data
      - omada-work:/opt/tplink/EAPController/work
      - omada-logs:/opt/tplink/EAPController/logs

  semaphore:
    <<: [*service-defaults, *logging-defaults]
    image: ansiblesemaphore/semaphore:latest
    environment:
      SEMAPHORE_DB_USER: postgres
      SEMAPHORE_DB_PASS: $PG_PASSWORD
      SEMAPHORE_DB_HOST: postgres
      SEMAPHORE_DB_PORT: 5432
      SEMAPHORE_DB_DIALECT: postgres
      SEMAPHORE_DB: semaphore?sslmode=disable
      SEMAPHORE_ADMIN_PASSWORD: $SEMAPHORE_ADMIN_PASSWORD
      SEMAPHORE_ACCESS_KEY_ENCRYPTION: $SEMAPHORE_ACCESS_KEY_ENCRYPTION
    depends_on:
      - postgres
      - caddy
